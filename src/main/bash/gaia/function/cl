#
# cl
#
# Command-line functions.
#

# Usage: eval $(cl-get-args ARG_NAME...)
#
# ARG_NAME should be all uppercase, using the underscore (`_`) as a word delimiter. The corresponding
# variable will be named in lowercase.
cl-get-args() {
  [[ ! ${1+x} ]] && { echo "shell-error-f -e2 $FUNCNAME Missing argument: \\\`ARG_NAME\\\`"; return 2; }

  local result=""
  local arg_name; for arg_name in "$@"; do
    local use_arg_name=${arg_name,,} # Lowercase
    [[ $result ]] && result="$result; "
    result="$result[[ ! \${1+x} ]] && shell-error -e2 Missing argument: \\\`$arg_name\\\`; \
        unset $use_arg_name; $use_arg_name=\$1; shift 1"
  done
  echo $result
}

# Usage: eval $(cl-get-args-f $FUNCNAME ARG_NAME...)
#
# ARG_NAME should be all uppercase, using the underscore (`_`) as a word delimiter. The corresponding
# variable will be named in lowercase.
cl-get-args-f() {
  [[ ! ${1+x} ]] && { echo "shell-error-f -r2 $FUNCNAME Missing argument: \\\`FUNC_NAME\\\`; return 2"; return 2; }
  local func_name=$1; shift 1
  [[ ! ${1+x} ]] && { echo "shell-error-f -r2 $FUNCNAME Missing argument: \\\`ARG_NAME\\\`; return 2"; return 2; }

  local result=""
  local arg_name; for arg_name in "$@"; do
    local use_arg_name=${arg_name,,} # Lowercase
    [[ $result ]] && result="$result; "
    result="$result[[ ! \${1+x} ]] && { shell-error-f -r2 \"$func_name\" Missing argument: \\\`$arg_name\\\`; return 2; }; \
        local $use_arg_name; $use_arg_name=\$1; shift 1"
  done
  echo $result
}

# Usage: eval $(cl-get-options OPT_STRING "$@")
#
# OPT_STRING is passed to `getopts`. No leading `:` is allowed.
cl-get-options() {
  [[ ! ${1+x} ]] && { echo "shell-error-f -e2 $FUNCNAME Missing argument: \\\`OPT_STRING\\\`"; return 2; }
  local opt_string=$1; shift 1

  # Collect options, which ones take an argument?
  local len=${#opt_string}
  declare -A map
  local i; for ((i = 0; i < len; ++i)); do
    local c=${opt_string:i:1}
    local next=
    if ((i < len - 1)); then
      next=${opt_string:i + 1:1}
    fi
    if [[ $next != : ]]; then
      map[$c]=0
    else
      map[$c]=1
      ((++i))
    fi
  done

  local result="unset ${!map[@]}"

  # Parse options using `getopts`
  local found=0
  local opt; while getopts :$opt_string opt; do # Leading `:`: silent mode
    [[ $opt == \? ]] && { echo "shell-error -e2 Invalid option: \\\`-$OPTARG\\\`;" return 2; }
    [[ $opt == : ]] && { echo "shell-error -e2 Option \\\`-$OPTARG\\\` requires an argument"; return 2; }
    local takes_arg=${map[$opt]}
    if [[ $found == 0 ]]; then
      result="$result;"
      found=1
    fi
    if [[ $takes_arg == 0 ]]; then
      result="$result $opt=1"
    else
      result="$result $opt=\"$OPTARG\""
    fi
  done

  result="$result; shift $((OPTIND - 1))"
  echo $result
}

# Usage: eval $(cl-get-options-f $FUNCNAME OPT_STRING "$@")
#
# OPT_STRING is passed to `getopts`. No leading `:` is allowed.
cl-get-options-f() {
  [[ ! ${1+x} ]] && { echo "shell-error-f -r2 $FUNCNAME Missing argument: \\\`FUNC_NAME\\\`; return 2"; return 2; }
  local func_name=$1; shift 1
  [[ ! ${1+x} ]] && { echo "shell-error-f -r2 $FUNCNAME Missing argument: \\\`OPT_STRING\\\`; return 2"; return 2; }
  local opt_string=$1; shift 1

  # Collect options, which ones take an argument?
  local len=${#opt_string}
  declare -A map
  local i; for ((i = 0; i < len; ++i)); do
    local c=${opt_string:i:1}
    local next=
    if ((i < len - 1)); then
      next=${opt_string:i + 1:1}
    fi
    if [[ $next != : ]]; then
      map[$c]=0
    else
      map[$c]=1
      ((++i))
    fi
  done

  local result="local ${!map[@]}"

  # Parse options using `getopts`
  local found=0
  local opt; while getopts :$opt_string opt; do # Leading `:`: silent mode
    [[ $opt == \? ]] && { echo "shell-error-f -r2 \"$func_name\" Invalid option: \\\`-$OPTARG\\\`; return 2"; return 2; }
    [[ $opt == : ]] && { echo "shell-error-f -r2 \"$func_name\" Option \\\`-$OPTARG\\\` requires an argument; return 2"; return 2; }
    local takes_arg=${map[$opt]}
    if [[ $found == 0 ]]; then
      result="$result;"
      found=1
    fi
    if [[ $takes_arg == 0 ]]; then
      result="$result $opt=1"
    else
      result="$result $opt=\"$OPTARG\""
    fi
  done

  result="$result; shift $((OPTIND - 1))"
  echo $result
}

# EOF
