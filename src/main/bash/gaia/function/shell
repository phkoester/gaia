#
# shell
#
# Shell functions.
#

# Usage: shell-error [-eN] [-n] [-rN] [ARG]...
#
#  -eN  if N is not 0, exit with status N. If N is 0, return with status 0
#  -n   do not print stack trace
#  -rN  return with status N
#
# If neither `-e` nor `-r` is supplied, this function exits with status 1.
shell-error() {
  eval $(cl-get-options-f $FUNCNAME "e:nr:" "$@")
  
  echo $(basename -- $0): error: $@ > /dev/stderr
  [[ ! $n ]] && shell-print-stack-trace

  if [[ $e ]]; then
    ((e == 0)) && return 0 || exit $e
  fi
  [[ $r ]] && return $r
  exit 1
}

# Usage: shell-error-f [-eN] [-n] [-rN] $FUNCNAME [ARG]...
#
#  -eN  if N is not 0, exit with status N. If N is 0, return with status 0
#  -n   do not print stack trace
#  -rN  return with status N
#
# If neither `-e` nor `-r` is supplied, this function exits with status 1.
shell-error-f() {
  eval $(cl-get-options-f $FUNCNAME "e:nr:" "$@")
  eval $(cl-get-args-f $FUNCNAME FUNC_NAME)
  
  echo $(basename -- $0): error: In function \`$func_name\`: $@ > /dev/stderr
  [[ ! $n ]] && shell-print-stack-trace
  
  if [[ $e ]]; then
    ((e == 0)) && return 0 || exit $e
  fi
  [[ $r ]] && return $r
  exit 1
}

shell-is-interactive() {
  [[ "$-" =~ i ]]
}

shell-is-login() {
  [[ $0 == -bash ]]
}

# Usage: shell-print-stack-trace
shell-print-stack-trace() {
  [[ $GAIA_NO_SHELL_PRINT_STACK_TRACE ]] && return

  echo Stack trace: > /dev/stderr
  local n=${#BASH_LINENO[@]}
  # `n - 2` skips `main`
  local i; for ((i = 0; i <= n - 2; ++i)); do
    local file=${BASH_SOURCE[i + 1]}

    # Filter-out first caller from this script
    [[ $i == 0 && $file == $BASH_SOURCE ]] && continue

    # Print entry
    echo "  at ${FUNCNAME[i + 1]} ($file:${BASH_LINENO[i]})" > /dev/stderr
  done
}

# EOF
